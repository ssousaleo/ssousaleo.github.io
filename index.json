[{"authors":null,"categories":null,"content":"Brazilian population has not responded well to the prevention programs to combat arboviral diseases, such as Zika and Dengue. Concerns with such diseases has led an overwhelming number of people to increasingly share online strategic information, including the discovery of mosquito breeding sites in public locations. Term social sensors refers to the online population that is motivated to contribute relevant information on social media channels. Recent increasing use of smartphones triggered the growing use of social networks even in poorer communities. Strategic information in these locations are harder to gather for health agents. The health agencies in Northeast should explore the collective knowledge generated by people to improve prevention and combat actions. Although the Brazilian Health System requires that health agents report each Zika case, it takes several days to process and publish this information. The project will develop a platform for promoting virtual communities to prevent and combat Zika. Its core is the VazaZika application. VazaZika will use geolocation and gamification technologies for stimulating citizens to denounce and confirm Aedes breeding sites, and for updating users, in real time, about actions taken by health agents.\nResearch Project, 2017 – Current\n","date":1540695600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540695600,"objectID":"b0e77f2ac5ca553615145015e2b8678b","permalink":"https://ssousaleo.github.io/project/vazazika-project/","publishdate":"2018-10-28T00:00:00-03:00","relpermalink":"/project/vazazika-project/","section":"project","summary":"Research Project, 2017 – Current. In cooperation with Newcastle University, UK, Newton Fund.","tags":["dengue","gamification","development"],"title":"Leveraging Gamification and Social Networks for Improving Prevention and Control of Zika","type":"project"},{"authors":["Leonardo Sousa","Anderson Oliveira","Willian Oizumi","Simone Barbosa","Alessandro Garcia","Jaejoon Lee","Marcos Kalinowski","Rafael de Mello","Baldoino Fonseca","Roberto Oliveira","Carlos Lucena","Rodrigo Paes"],"categories":null,"content":"Award received for an authored ICSE paper regarding a theory on the identification of design problems in the source code. ICSE is the world\u0026rsquo;s main conference in the field of software engineering. In 40 years of ICSE this was the second time that a paper from Brazil receives such distinction.\nPaper: Identifying Design Problems in the Source Code: A Grounded Theory.\n","date":1527908400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540695600,"objectID":"111de661d30554ff22c560f21f8a3a19","permalink":"https://ssousaleo.github.io/post/icse-award/","publishdate":"2018-06-02T00:00:00-03:00","relpermalink":"/post/icse-award/","section":"post","summary":"International Conference on Software Engineering (ICSE 2018) May 27 - June 3, 2018, Gothenburg, Sweden","tags":["award","theory","icse","design problems"],"title":"ACM SIGSOFT Distinguished Paper Award","type":"post"},{"authors":["Leonardo Sousa","Anderson Oliveira","Willian Oizumi","Simone Barbosa","Alessandro Garcia","Jaejoon Lee","Marcos Kalinowski","Rafael de Mello","Baldoino Fonseca","Roberto Oliveira","Carlos Lucena","Rodrigo Paes"],"categories":null,"content":"","date":1525143600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525143600,"objectID":"5242d0d38c51fce675bc64eb7aa83112","permalink":"https://ssousaleo.github.io/publication/icse-theory/","publishdate":"2018-05-01T00:00:00-03:00","relpermalink":"/publication/icse-theory/","section":"publication","summary":"The prevalence of design problems may cause re-engineering or even discontinuation of the system. Due to missing, informal or outdated design documentation, developers often have to rely on the source code to identify design problems. Therefore, developers have to analyze different symptoms that manifest in several code elements, which may quickly turn into a complex task. Although researchers have been investigating techniques to help developers in identifying design problems, there is little knowledge on how developers actually proceed to identify design problems. In order to tackle this problem, we conducted a multi-trial industrial experiment with professionals from 5 software companies to build a grounded theory. The resulting theory offers explanations on how developers identify design problems in practice. For instance, it reveals the characteristics of symptoms that developers consider helpful. Moreover, developers often combine different types of symptoms to identify a single design problem. This knowledge serves as a basis to further understand the phenomena and advance towards more effective identification techniques.","tags":["award","code smells","design problems","symptoms","theory"],"title":"Identifying Design Problems in the Source Code: A Grounded Theory","type":"publication"},{"authors":["Leonardo Sousa","Rafael de Mello","Diego Cedrima","Alessandro Garcia","Paolo Missier","Anderson Uchôa","Anderson Oliveira","Alexander Romanovsky"],"categories":null,"content":"","date":1524279600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524279600,"objectID":"f1ecb4e2663cb7c78f3d3548c99a842a","permalink":"https://ssousaleo.github.io/publication/journal-dengue/","publishdate":"2018-04-21T00:00:00-03:00","relpermalink":"/publication/journal-dengue/","section":"publication","summary":"Dengue is a disease transmitted by the Aedes Aegypti mosquito, which also transmits the Zika virus and Chikungunya. Unfortunately, the population of different countries has been suffering from the diseases transmitted by this mosquito. The communities should play an important role in combating and preventing the mosquito-borne diseases. However, due to the limited engagement of the population, new solutions need to be used to strengthen the mosquito surveillance. VazaDengue is one of these solutions, which offers the users a web and mobile platform for preventing and combating mosquito-borne diseases. The system relies on social actions of citizens reporting mosquito breeding sites and dengue cases, in which the reports are made available to the community and health agencies. In order to address the limited population engagement, the system proactively monitors social media network as Twitter to enrich the information provided by the system. It processes the natural language text from the network to classify the tweets according to a set of predefined categories. After the classification, the relevant tweets are provided to the users as reports. In this paper, we describe the VazaDengue features including its ability to harvest and classify tweets. Since the VazaDengue system aims to strengthen the entomological surveillance of the mosquito that transmits Dengue, Zika, and Chikungunya by providing geolocated reports, we present here two studies to evaluate its potential contributions. The first evaluation uses a survey conducted in the Brazilian community of health agents. The goal is to evaluate the relevance of the classified tweets according to the health agents’ perspective. The second study compares the official reports of the 2015–2016 epidemic waves in Brazil with the concentration of mosquito-related tweets found by VazaDengue. The goal is to verify if the concentration of tweets can be used for monitoring the mosquito manifestation in big cities. The results of these two evaluations are encouraging. For instance, we have found that the health agents tend to agree with the relevance of the classified tweets. Moreover, the concentration of tweets is likely to be effective for monitoring big cities. The results of these evaluations are helping us to improve the VazaDengue system further. These improvements will make the VazaDengue system even more useful for combating and preventing the mosquito-borne diseases.","tags":["Dengue","Mosquito","Social media","Surveillance","Tweets"],"title":"VazaDengue: An Information System for Preventing and Combating Mosquito-Borne Diseases with Social Networks","type":"publication"},{"authors":["Willian Oizumi","Leonardo Sousa","Anderson Oliveira","Alessandro Garcia","Anne Benedicte Agbachi","Roberto Oliveira","Carlos Lucena"],"categories":null,"content":"","date":1521601200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521601200,"objectID":"c5354f253e8adad2b6b0ccf7ed63d7c5","permalink":"https://ssousaleo.github.io/publication/journal-willian-2018/","publishdate":"2018-03-21T00:00:00-03:00","relpermalink":"/publication/journal-willian-2018/","section":"publication","summary":"Background: Developers often have to locate design problems in the source code. Several types of design problems may manifest as code smells in the program. A code smell is a source code structure that may reveal a partial hint about the manifestation of a design problem. Recent studies suggest that developers should ignore smells occurring in isolation in a program location. Instead, they should focus on analyzing stinkier code, i.e., program locations—e.g., a class or a hierarchy—affected by multiple smells. There is evidence that the stinkier a program location is, the more likely it contains a design problem. However, there is no empirical evidence on whether developers can effectively identify a design problem in stinkier code. Developers may struggle to make an analysis of inter-related smells affecting the same program location. Besides that, the analysis of stinkier code may require proper tool support due to its analysis complexity. However, there is little knowledge on what are the requirements for a tool that helps developers in revealing stinkier program locations. As a result, developers may not be able to identify design problems due to tool issues. Method: To address this matter, we aimed at achieving three goals. In the first case, we proposed Organic—a tool supporting the analysis of stinky code. In the second case, we applied a mixed-method approach to analyze if and how developers can effectively find design problems when reflecting upon stinky code—i.e., a program location affected by multiple smells. We conducted a study with 11 software professionals. Finally, in the third case, we aimed at understanding if Organic could be used by developers to identify design problems. To achieve this goal, we used a method from the Semiotic Engineering theory. This method enabled us to evaluate what are the tool issues that may hinder the identification of design problems in stinky code. Result: Our study revealed that only 36.36% of the developers found more design problems when explicitly reasoning about multiple smells as compared to single smells. Moreover, 63.63% of the developers reported much lesser false positives when using the first approach as compared to the latter. The second study, in its turn, showed that most developers may be unable to identify design problems in stinky code without proper tool support. Conclusion: Our experiences, in particular the second study, helped us to refine the features of Organic for better supporting developers in reflecting upon stinkier code. For example, analyses of stinky code scattered in class hierarchies or packages is often difficult, time-consuming, and requires proper visualization support. Moreover, without effective support, it remains time-consuming to discard stinky program locations that do not represent design problems.","tags":["agglomeration","code smells","design problems","symptoms","theory"],"title":"On the Identification of Design Problems in Stinky Code: Experiences and Tool Support","type":"publication"},{"authors":["Leonardo Sousa","Roberto Oliveira","Alessandro Garcia","Jaejoon Lee","Tayana Conte","Willian Oizumi","Rafael de Mello","Adriana Lopes","Natasha Valentim","Edson Oliveira","Carlos Lucena"],"categories":null,"content":"","date":1506049200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506049200,"objectID":"d5a39c2201e43023c352e0724c100ec4","permalink":"https://ssousaleo.github.io/publication/sbes-2017/","publishdate":"2017-09-22T00:00:00-03:00","relpermalink":"/publication/sbes-2017/","section":"publication","summary":"When a software design decision has a negative impact on one or more quality attributes, we call it a design problem. For example, the Fat Interface problem indicates that an interface exposes non-cohesive services. Thus, clients and implementations of this interface may have to handle with services that they are not interested. A design problem such as this hampers the extensibility and maintainability of a software system. As illustrated by the example, a single design problem often affects several elements in the program. Despite its harmfulness, it is difficult to identify a design problem in a system. It is even more challenging to identify design problems when the source code is the only available artifact. In particular, no study has observed what strategy(ies) developers use in psractice to identify design problems when the design documentation is unavailable. In order to address this gap, we conducted a qualitative analysis on how developers identify design problems in two different scenarios: when they are either familiar (Scenario 1) or unfamiliar (Scenario 2) with the analyzed systems. Developers familiar with the systems applied a diverse set of strategies during the identification of each design problem. Some strategies were frequently used to locate code elements for analysis, and other strategies were frequently used to confirm design problems in these elements. Developers unfamiliar with the systems relied only on the use of code smells along the task. Despite some differences among the subjects from both scenarios, we noticed that developers often search for multiple indicators during the identification of each design problem.","tags":["code smells","design problems","symptoms"],"title":"How Do Software Developers Identify Design Problems?: A Qualitative Analysis","type":"publication"},{"authors":["Willian Oizumi","Leonardo Sousa","Alessandro Garcia","Roberto Oliveira","Anderson Oliveira","O. I. Anne Benedicte Agbachi","Carlos Lucena"],"categories":null,"content":"Award received for a co-authored SBCARS paper regarding how developers can effectively find design problems when reflecting upon stinky code. The Brazilian Symposium on Software Components, Architectures, and Reuse (SBCARS) is promoted by the Brazilian Computer Society (SBC) and attracts researchers, students, and practitioners interested in a broad range of software engineering topics, including software product lines, component-based development, architectures, and reuse.\nPaper: Revealing design problems in stinky code: a mixed-method study.\n","date":1505703600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540695600,"objectID":"133da50152a2f23169f77c3db87f4a03","permalink":"https://ssousaleo.github.io/post/sbcars-award/","publishdate":"2017-09-18T00:00:00-03:00","relpermalink":"/post/sbcars-award/","section":"post","summary":"Proceedings of the 11th Brazilian Symposium on Software Components, Architectures, and Reuse (SBCARS '17), Sep 18-22, 2017, Fortaleza, Ceará, Brazil","tags":["award","agglomeration","code smells","design problems","sbcars"],"title":"Distinguished Paper Award","type":"post"},{"authors":["Willian Oizumi","Leonardo Sousa","Alessandro Garcia","Roberto Oliveira","Anderson Oliveira","O. I. Anne Benedicte Agbachi","Carlos Lucena"],"categories":null,"content":"","date":1505703600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505703600,"objectID":"2de371a2f3cf6f8dbfc14765fc095ba4","permalink":"https://ssousaleo.github.io/publication/sbcars-2017/","publishdate":"2017-09-18T00:00:00-03:00","relpermalink":"/publication/sbcars-2017/","section":"publication","summary":"Developers often have to locate design problems in the source code. Several types of design problem may manifest as code smells in the program. A code smell is a source code structure that may reveal a partial hint about the manifestation of a design problem. Recent studies suggest that developers should ignore smells occurring in isolation in a program location. Instead, they should focus on analyzing stinkier code, i.e. program locations - e.g., a class or a hierarchy - affected by multiple smells. The stinkier a program location is, more likely it contains a design problem. However, there is limited understanding if developers can effectively identify a design problem in stinkier code. Developers may struggle to make a meaning out of inter-related smells affecting the same program location. To address this matter, we applied a mixed-method approach to analyze if and how developers can effectively find design problems when reflecting upon stinky code - i.e., a program location affected by multiple smells. We performed an experiment and an interview with 11 professionals. Surprisingly, our analysis revealed that only 36.36% of the developers found more design problems when explicitly reasoning about multiple smells as compared to single smells. On the other hand, 63.63% of the developers reported much lesser false positives. Developers reported that analyses of stinky code scattered in class hierarchies or packages is often difficult, time consuming, and requires proper visualization support. Moreover, it remains time-consuming to discard stinky program locations that do not represent design problems.","tags":["agglomeration","award","code smells","design problems"],"title":"Revealing design problems in stinky code: a mixed-method study","type":"publication"},{"authors":null,"categories":null,"content":"Dengue is an endemic problem in many areas where public health services assistance is inefficient, and sometimes it is not even there. The Brazilian public health system cannot meet the demands of these areas due to the scarcity of resources available and the number of risk areas that requires monitoring. To make the matters worse, it is very difficult to identify and control dengue outbreaks in their initial stages. Therefore, it needs to notify focus of dengue mosquito in order to make it easier preventing dengue epidemic and to take the best actions. To assist the surveillance and detection of dengue mosquito and outbreaks, we propose an integrated platform for population to act as an etymological surveillance agent. The goal is to collect and transmit geo-referenced data, providing information to assist in entomological surveillance of dengue. To accomplish the aforementioned goal, we will developer (i) mobile applications to collect data, (ii) a web portal for centralizing data and (iii) we will mining social media to extract data and to monitor dengue outbreaks. The computational solution aims at gathering information on the reporting of the mosquito that transmits dengue. Allowing us to organize it and to plot it on maps. The point is to make it available to the government and the population.\nResearch Project, 2015 – 2016\n","date":1430449200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1430449200,"objectID":"6bc6ab8df31e0b6f2b4bf1c156a9b141","permalink":"https://ssousaleo.github.io/project/vazadengue-project/","publishdate":"2015-05-01T00:00:00-03:00","relpermalink":"/project/vazadengue-project/","section":"project","summary":"Research Project, 2015 – 2016. In cooperation with Newcastle University, UK, Newton Fund.","tags":["dengue","gamification","development"],"title":"A Software Infrastructure for Promoting Efficient Entomological Monitoring of Dengue Fever","type":"project"}]